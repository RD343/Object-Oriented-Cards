#ifndef CARD_H
#define CARD_H

#include <iostream>
#include <iomanip>
#include <string>
#include <cstdlib>

enum Suit {Joker = 0, Clubs, Diamonds, Hearts, Spades};
enum Rank {None = 0, Ace, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King};	//Added all numbers for string conversion

class Card
{
	friend class Deck;

private:
	int suit;
	int rank;
	void setSuit(int aSuit);
	void setRank(int aRank);
public:
	Card();
	std::string toString() const;		//This would not work without std:: in front of string
	int getSuit() const;
	int getRank() const;
	void printCard() const;

	//Operator < and > Overload
	//I set up these functions to compare suits and/or ranks.
	friend bool operator< (Card& tempCard_A, Card& tempCard_B)
	{
		if(tempCard_A.getRank() == tempCard_B.getRank())	//If the ranks are equal, then the operator will compare the suits.
		{	
			return (tempCard_A.getSuit() < tempCard_B.getSuit());
		}
		else
		{
			return (tempCard_A.getRank() < tempCard_B.getRank());
		}
	}
	friend bool operator> (Card& tempCard_A, Card& tempCard_B)
	{
		if(tempCard_A.getRank() == tempCard_B.getRank())
		{	
			return (tempCard_A.getSuit() > tempCard_B.getSuit());
		}
		else
		{
			return (tempCard_A.getRank() > tempCard_B.getRank());
		}
	}
};

Card bool operator< (Card& tempCard_A, Card& tempCard_B)
Card bool operator> (Card& tempCard_A, Card& tempCard_B)
#endif
